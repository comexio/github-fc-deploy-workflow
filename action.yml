name: GitHub Feature/Release Candidate Deploy Workflow

description: Reutiliza processos de build de imagem Docker, upload de arquivos e deploy para servidores EC2, incluindo conexão via VPN.

inputs:
  AWS_ACCESS_KEY_ID:
    required: true
    description: AWS Access Key ID
  AWS_SECRET_ACCESS_KEY:
    required: true
    description: AWS Secret Key
  AWS_REGION:
    required: true
    description: AWS Region
  AWS_S3_BUCKET:
    required: false
    description: Nome do bucket S3 para baixar arquivos (se aplicável)
  ENV_FILE_PATH:
    required: false
    description: Caminho do arquivo de ambiente no S3 (se aplicável)
  ENV_ENCRYPTION_PASSWORD:
    required: false
    description: Senha de criptografia do arquivo .env
  ECR_REGISTRY:
    required: false
    description: URL do repositório ECR
  IMAGE_NAME:
    required: false
    description: Nome da imagem no ECR
  DOCKERFILE_PATH:
    required: false
    description: Caminho para o Dockerfile
  BASE_IMAGE:
    required: false
    description: Imagem base (se necessário)
  DEPLOY_FILES:
    required: false
    description: Lista de arquivos a serem empacotados para deploy
  SERVER_LIST:
    required: false
    description: Lista de servidores para deploy (JSON)
  SSH_USER:
    required: false
    description: Usuário SSH para deploy
  SSH_KEY_FILE:
    required: false
    description: Chave SSH para acessar os servidores
  OVPN_CONFIG_FILE:
    required: false
    description: Configuração do OpenVPN (se necessário)
  OVPN_CERT_PASS:
    required: false
    description: Senha do OpenVPN (se necessário)
  GITHUB_TOKEN:
    required: false
    description: Token do GitHub para criar a release
  SECRET_MANAGER_KEY:
    required: false
    description: Key do secret manager

runs:
  using: "composite"
  steps:
  - name: Baixando código do repositório
    uses: actions/checkout@v4

  - name: Buscando Última Pre-Release do GitHub via API
    id: find-pre-release
    shell: bash
    run: |
      TAG=$(curl -s -H "Authorization: Bearer ${{ inputs.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=10" | \
            jq -r '[.[] | select(.prerelease == true)] | first | .tag_name')

      if [[ -z "$TAG" || "$TAG" == "null" ]]; then
        echo "::error::Nenhuma pre-release encontrada!"
        exit 1
      fi

      echo "TAG=$TAG" >> $GITHUB_ENV
    env:
      GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}

  - name: Configurando credenciais da AWS
    uses: aws-actions/configure-aws-credentials@v4
    with:
      aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ inputs.AWS_REGION }}

  - name: Baixando arquivo .env (se aplicável)
    if: ${{ inputs.AWS_S3_ENVFILES_BUCKET != '' && inputs.ENV_FILE_PATH != '' }}
    run: |
      aws s3 cp s3://${{ inputs.AWS_S3_ENVFILES_BUCKET }}/${{ inputs.ENV_FILE_PATH }} /tmp/env
    shell: bash

  - name: Obtendo secret do Secret Manager
    if: ${{ inputs.SECRET_MANAGER_KEY != '' }}
    uses: t-botz/aws-secrets-manager-read-action@45282af736fa0ae7e0559ed105b42538344cb864
    with:
      secret-id: ${{ inputs.SECRET_MANAGER_KEY }}
      mask-json-values: true
      append-to-env-file: /tmp/env

  - name: Criptografando arquivo env com senha
    if: ${{ inputs.ENV_ENCRYPTION_PASSWORD != '' }}
    run: |
      # gpg -d --batch --passphrase "${{ inputs.ENV_ENCRYPTION_PASSWORD }}" /tmp/env.gpg > .env
      gpg -c --batch --cipher-algo AES256 --passphrase "${{ inputs.ENV_ENCRYPTION_PASSWORD }}" /tmp/env
    shell: bash

  # ##################  PUBLISH IMAGE # ##################

  - name: Adicionando Github Token ao Composer
    run: |
      cat <<-EOF > auth.json
      {
          "github-oauth": {
              "github.com": "${{ inputs.GITHUB_TOKEN }}"
          }
      }
      EOF
    shell: bash

  - name: Autenticando no ECR (se aplicável)
    if: ${{ inputs.ECR_REGISTRY != '' }}
    uses: docker/login-action@v3
    with:
      registry: ${{ inputs.ECR_REGISTRY }}

  ## TAGEAR A IMAGEM COM A TAG PRERELEASE QUE BUSCAMOS DO GITHUB
  - name: Gerando Tags e Labels para usar na imagem
    id: meta
    uses: docker/metadata-action@v4
    with:
      images: ${{ inputs.ECR_REGISTRY }}/${{ inputs.IMAGE_NAME }}
      flavor: latest=true
      tags: |
        type=raw,value=${{ env.TAG }}
        type=sha,format=long,prefix=
      labels: |
        org.opencontainers.image.version=${{ env.TAG }}

  - name: Build e Push da Imagem Docker (se aplicável)
    if: ${{ inputs.DOCKERFILE_PATH != '' }}
    uses: docker/build-push-action@v3
    with:
      context: .
      file: ${{ inputs.DOCKERFILE_PATH }}
      # tags: ${{ steps.meta.outputs.tags }}
      tags: |
        ${{ inputs.ECR_REGISTRY }}/${{ inputs.IMAGE_NAME }}:${{ env.TAG }}
        ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      push: true
      build-args: |
        IMAGE=${{ inputs.BASE_IMAGE }}

  - name: Exportando Summary
    run: |
      echo "### Image tag :framed_picture:" >> $GITHUB_STEP_SUMMARY
      # echo "$GITHUB_SHA" >> $GITHUB_STEP_SUMMARY
      echo "${{ env.TAG }}" >> $GITHUB_STEP_SUMMARY
    shell: bash

  # ##################  DEPLOY IMAGE # ##################

  - name: Criando e Armazenando Artefato de Deploy (se aplicável)
    if: ${{ inputs.DEPLOY_FILES != '' }}
    run: |
      mkdir -p /tmp/deploy
      set -f

      for file in ${{ inputs.DEPLOY_FILES }}; do
        echo "Copiando $file para /tmp/deploy/"
        cp "$file" /tmp/deploy/ || { echo "Erro ao copiar $file"; exit 1; }
      done

      tar -czf /tmp/deploy.tar.gz -C /tmp/ deploy/
    shell: bash

  - name: Armazenando arquivo de Deploy
    uses: actions/upload-artifact@v4
    with:
      name: deploy
      path: /tmp/deploy.tar.gz
      if-no-files-found: error
      retention-days: 1

  - name: Buscando IPs das EC2 com nome específico
    id: find-ec2
    shell: bash
    run: |
      echo "Buscando instâncias EC2 com nome contendo ${{ inputs.SERVER_LIST }} ..."

      INSTANCE_INFO=$(aws ec2 describe-instances \
        --region ${{ inputs.AWS_REGION }} \
        --filters "Name=tag:Name,Values=*${{ inputs.SERVER_LIST }}*" "Name=instance-state-name,Values=running" \
        --query "Reservations[].Instances[].{InstanceId:InstanceId,PublicIpAddress:PublicIpAddress}" \
        --output json)

      echo "Dados das instâncias encontradas: $INSTANCE_INFO"

      INSTANCE_IDS=$(echo "$INSTANCE_INFO" | jq -r '.[] | .InstanceId')
      IP_ADDRESSES=$(echo "$INSTANCE_INFO" | jq -r '.[] | .PublicIpAddress' | grep -v null)

      if [[ -z "$IP_ADDRESSES" ]]; then
        echo "::error::Nenhuma instância ativa com IP público encontrada."
        exit 1
      fi

      echo "Instâncias encontradas:"
      echo "$INSTANCE_IDS"
      echo "IPs encontrados:"
      echo "$IP_ADDRESSES"

      # Exporta os IPs para serem usados nos próximos steps
      echo "EC2_IPS=$(echo "$IP_ADDRESSES" | tr '\n' ' ')" >> $GITHUB_ENV

  - name: Instalando OpenVPN
    shell: bash
    run: |
      sudo apt-get update
      sudo apt-get install openvpn -y

  - name: Configurando a VPN (se necessário)
    if: ${{ inputs.OVPN_CONFIG_FILE != '' }}
    shell: bash
    run: |
      echo "${{ inputs.OVPN_CERT_PASS }}" > vpn_pass.txt
      echo "${{ inputs.OVPN_CONFIG_FILE }}" > cicd.ovpn

      # Adiciona todas as rotas dos servidores no arquivo de configuração
      for IP in $EC2_IPS; do
        echo "route $IP 255.255.255.255" >> cicd.ovpn
      done

      echo "route-nopull" >> cicd.ovpn

      sudo openvpn --config cicd.ovpn --askpass vpn_pass.txt --daemon
      sleep 5

      # Verificação da VPN
      if ! ip address | grep -q " tun"; then
        echo "::error::Interface da VPN não encontrada!"
        exit 1
      fi

  - name: Salvando chave SSH
    shell: bash
    run: |
      echo "${{ inputs.SSH_KEY_FILE }}" > ssh_key.pem
      chmod 600 ssh_key.pem

  - name: Baixando artefato de Deploy
    uses: actions/download-artifact@v4
    with:
      name: deploy

  - name: Copiando o arquivo de Deploy para as instâncias EC2
    shell: bash
    run: |
      for IP in $EC2_IPS; do
        echo "Copiando para $IP..."
        scp -o StrictHostKeyChecking=no -i ssh_key.pem deploy.tar.gz ${{ inputs.SSH_USER }}@$IP:/tmp/
      done

  - name: Executando comandos remotos nas instâncias EC2
    uses: appleboy/ssh-action@master
    with:
      username: ${{ inputs.SSH_USER }}
      key_path: ssh_key.pem
      host: ${{ env.EC2_IPS }}
      script: |
        set -e
        tar -xzf /tmp/deploy.tar.gz -C /tmp/
        # export GITHUB_COMMIT=${{ github.sha }}
        export GITHUB_COMMIT=${{ env.TAG }}
        bash /tmp/deploy/up.sh
        rm -rf /tmp/deploy /tmp/deploy.tar.gz

  - name: Encerrando a VPN (se aplicável)
    if: always() && inputs.OVPN_CONFIG_FILE != ''
    shell: bash
    run: |
      echo "Desconectando VPN..."
      sudo killall openvpn
      sleep 5

  - name: Definir Release como Latest
    if: github.ref == 'refs/heads/main'
    shell: bash
    run: |
      echo "Atualizando a release ${{ env.TAG }} para remover pré-release e marcar como latest..."

      gh release edit ${{ env.TAG }} --prerelease=false --latest
    env:
      GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}

  - name: Criar PR para main se a branch for RC
    if: startsWith(github.ref, 'refs/heads/rc/')
    id: create-pr
    shell: bash
    run: |
      CURRENT_BRANCH=$(echo "${GITHUB_REF#refs/heads/}")
      echo "Branch atual: $CURRENT_BRANCH"

      PR_TITLE="[RC] branch $CURRENT_BRANCH to Main"
      PR_BODY="Pull Request RC to Main"

      echo "Criando PR: $PR_TITLE"

      gh pr create --base="main" --head="$CURRENT_BRANCH" --title="$PR_TITLE" --body="$PR_BODY"
    env:
      GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
